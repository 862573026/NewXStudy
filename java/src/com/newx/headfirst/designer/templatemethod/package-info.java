/**
 * Created by xuzhijian on 2018/2/14 0014.
 * <p>
 * 模板方法模式
 * 泡咖啡喝泡茶例子引入 -> 两者有很大相似性
 * -> 定义一个步骤，允许子类为一个或者多个步骤提供实现（必须确定方法是相似的且固定不变的）
 * <p>
 * 一个方法中定义一个算法骨架，而将一些步骤延迟到子类中。模板方法使得子类在不改变算法结构的
 * 情况下，重新定义算法中的某些步骤。
 *  为了防止子类改变模板方法中的算法，可以将模板方法声明为final
 *
 * Hook -> 1.使用钩子能决定要不要覆盖方法。
 *         2.有机会对模板方法中的即将发生的步骤做出反应
 *         （比如根据判断多次执行某一步骤或者跳过某一步骤）
 * 步骤分割原则：1.步骤可选，设计成钩子
 *               2.太细，都是抽象方法子类实现麻烦；太少不如不用
 *
 *
 * 好莱坞原则：别打电话(调用)给我们，我们会打电话(调用)给你
 *           可以防止"依赖腐败" -> 高低层组件相互依赖
 *           (使用到的设计模式:模板方法、工厂方法、观察者)
 *           -> 并不一定禁止调用高层，常常会调用超类中继承来的方法，
 *              但是要避免高低层组件有环状依赖。
 *
 * Java中应用：1.比如io的InputStream有一个read方法，子类实现，又被
 *             read(byte[] b[],int off,int on)模板方法使用
 *             2.JFrame,paint方法相当于钩子，不做事情，通过覆盖paint，
 *             可以将自己的代码插入JFrame的算法中。
 *             3.android的话onCreate之类不都是钩子吗? 用钩子来提供行为
 * 策略模式，类的组合实现了整个算法，模板模式实现部分。
 *
 *
 */
package com.newx.headfirst.designer.templatemethod;